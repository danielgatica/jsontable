import pandas as pd
import json
import re

# Example structure of your df_json
# df_json = pd.DataFrame({'specification': ['{"3rd Rack": "Yes", "Brand": "Whirlpool"}', ...]})

# Step 1: Mapping of original SQL columns to normalized Pythonic column names
column_map = {
    "3rd Rack": "third_rack",
    "AD Compliant": "ad_compliant",
    "ADA Compliant": "ada_compliant",
    "Additional Door Capabilities": "additional_door_capabilities",
    "Appliance Type": "appliance_type",
    "Auto Cook": "auto_cook",
    "Auto Dose Dispenser": "auto_dose_dispenser",
    "Base Color": "base_color",
    "Bleach Dispenser": "bleach_dispenser",
    "Brand": "brand",
    "Broil Element Location": "broil_element_location",
    "Built-In": "built_in",
    "Burner Type": "burner_type",
    "CFM": "cfm",
    "Capacity": "capacity",
    "Capacity (cu ft)": "capacity_cu_ft",
    "Capacity Range (cu ft)": "capacity_range_cu_ft",
    "Child Lock": "child_lock",
    "Cleaning Type": "cleaning_type",
    "Cold Optimized": "cold_optimized",
    "Color": "color",
    "Compartment Divider (Yes/No)": "compartment_divider_yes_no",
    "Configuration": "configuration",
    "Console Design": "console_design",
    "Control Type": "control_type",
    "Convection": "convection",
    "Convection Type": "convection_type",
    "Cooktop": "cooktop",
    "Cooktop Control Location": "cooktop_control_location",
    "Cooktop Control Method": "cooktop_control_method",
    "Cooktop Elements": "cooktop_elements",
    "Cooktop Light": "cooktop_light",
    "Cooktop Max Output": "cooktop_max_output",
    "Counter-depth": "counter_depth",
    "Cycles": "cycles",
    "DBA Level": "dba_level",
    "Defrost": "defrost",
    "Defrost Type": "defrost_type",
    "Depth": "depth",
    "Depth (in)": "depth_in",
    "Depth with Door Open (in)": "depth_with_door_open_in",
    "Depth with handles (in)": "depth_with_handles_in",
    "Detergent Dispenser": "detergent_dispenser",
    "Digital Display": "digital_display",
    "Display Type": "display_type",
    "Door Window": "door_window",
    "Door-in-Door": "door_in_door",
    "Double Oven": "double_oven",
    "Downdraft Ventilation": "downdraft_ventilation",
    "Drawer Type": "drawer_type",
    "Electric/Gas": "electric_gas",
    "Element Sizes": "element_sizes",
    "Energy Consumption (kWh/yr)": "energy_consumption_kwh_yr",
    "Energy Rating": "energy_rating",
    "Energy Star": "energy_star",
    "Evaporator": "evaporator",
    "Exterior Water and Ice Dispenser": "exterior_water_and_ice_dispenser",
    "Fabric Softener Dispenser": "fabric_softener_dispenser",
    "Fold-Down Tines": "fold_down_tines",
    "Food Disposer": "food_disposer",
    "Form Factor": "form_factor",
    "Freezer Capacity (cu ft)": "freezer_capacity_cu_ft",
    "Fuel Type": "fuel_type",
    "GTIN13": "gtin13",
    "Gallon Door Bins": "gallon_door_bins",
    "Griddle": "griddle",
    "Handle Color": "handle_color",
    "Handle Type": "handle_type",
    "Height": "height",
    "Height Approx in": "height_approx_in",
    "Height in": "height_in",
    "Height with handles (in)": "height_with_handles_in",
    "Hidden Vent": "hidden_vent",
    "Humidity Controlled Crispers": "humidity_controlled_crispers",
    "Icemaker": "icemaker",
    "Interior Color": "interior_color",
    "Interior Finish": "interior_finish",
    "Interior Material": "interior_material",
    "Interior Refrigerator Light Type": "interior_refrigerator_light_type",
    "Internal Water Heater": "internal_water_heater",
    "Load Type": "load_type",
    "Low Profile": "low_profile",
    "Matching Washer Load Type": "matching_washer_load_type",
    "Max Output": "max_output",
    "Microwave Size (in)": "microwave_size_in",
    "Microwave Type": "microwave_type",
    "Number of Compartments": "number_of_compartments",
    "Number of Doors": "number_of_doors",
    "Options": "options",
    "Oven Capacity cu ft": "oven_capacity_cu_ft",
    "Oven Racks": "oven_racks",
    "POD Dispenser": "pod_dispenser",
    "Panel Material": "panel_material",
    "Part Number": "part_number",
    "Place Setting Capacity": "place_setting_capacity",
    "Power": "product_power",
    "Power (watts)": "power_watts",
    "Primary Oven Capacity (cu ft)": "primary_oven_capacity_cu_ft",
    "Product": "product",
    "Product Debut": "product_debut",
    "Product Family": "product_family",
    "Product Size": "product_size",
    "Product Type": "product_type",
    "Product Weight (lbs)": "product_weight_lbs",
    "Range Type": "range_type",
    "Refrigerator Capacity (cu ft)": "refrigerator_capacity_cu_ft",
    "Reheat": "reheat",
    "Sabbath Mode (Yes/No)": "sabbath_mode_yes_no",
    "Sanitize": "sanitize",
    "Secondary Oven Capacity (cu ft)": "secondary_oven_capacity_cu_ft",
    "Self-Cleaning Filter": "self_cleaning_filter",
    "Sensor": "sensor",
    "Sensor Clean": "sensor_clean",
    "Series": "series",
    "Shelf Type": "shelf_type",
    "Smart Appliance": "smart_appliance",
    "Smart-Home Compatibility (Yes/No)": "smart_home_compatibility_yes_no",
    "Spill proof shelves": "spill_proof_shelves",
    "Stackable": "stackable",
    "Steam": "steam",
    "Tall Door": "tall_door",
    "Temperature Control Pantry": "temperature_control_pantry",
    "Temperature Setting Options": "temperature_setting_options",
    "Timer": "timer",
    "Total Capacity (cu ft)": "total_capacity_cu_ft",
    "Tub Material": "tub_material",
    "Turntable": "turntable",
    "Turntable Diameter (in)": "turntable_diameter_in",
    "UPC": "upc",
    "Virtual Assistant Type": "virtual_assistant_type",
    "Voice Control": "voice_control",
    "Warranty": "warranty",
    "Wash Mechanism": "wash_mechanism",
    "Water Filter": "water_filter",
    "Weight lbs": "weight_lbs",
    "Width": "width",
    "Width Approx in": "width_approx_in",
    "Width in": "width_in",
    "Width with handles (in)": "width_with_handles_in"
}

# Step 2: Create the normalized DataFrame structure
normalized_columns = list(column_map.values())
df_normalized = pd.DataFrame(columns=normalized_columns)

# Step 3: Populate the DataFrame
for _, row in df_json.iterrows():
    spec_raw = row["specification"]
    spec_dict = json.loads(spec_raw) if isinstance(spec_raw, str) else spec_raw
    normalized_row = {column_map[k]: v for k, v in spec_dict.items() if k in column_map}
    df_normalized = pd.concat([df_normalized, pd.DataFrame([normalized_row])], ignore_index=True)

# Optional: If you want to merge this with `df_json` on index or another key
# df_combined = df_json.join(df_normalized)
